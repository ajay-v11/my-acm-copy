// This is your Prisma schema file,

// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?

// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url = env("DATABASE_URL")
}

// Enums

enum UserRole {
  deo //data entry operator

  supervisor

  secretary

  ad //assistant director( has district wide access while the above 3 only has committee wide access)
}

enum Unit {
  kilograms

  quintals

  numbers

  bags
}

enum ReportLevel {
  committee
  district
  checkpost
}

enum NatureOfReceipt {
  mf // market fees

  lc // license

  uc // user charge

  others
}

enum CollectionLocation {
  office

  checkpost

  other
}

enum TargetType {
  OVERALL_COMMITTEE // The total target for the entire committee
  COMMITTEE_OFFICE // The sub-target for office-based supervisors
  CHECKPOST // The sub-target for a specific checkpost
}

// Models

model User {
  id String @id @default(uuid())

  username String @unique

  password String

  name String

  role UserRole

  committeeId String?

  designation String

  isActive Boolean @default(true)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  // Relations

  committee Committee? @relation(fields: [committeeId], references: [id])

  receipts Receipt[]

  committeeAnalytics CommitteeMonthlyAnalytics[]

  @@index([username])
}

model Committee {
  id String @id @default(uuid())

  name String @unique

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  // Relations

  users User[]

  checkposts Checkpost[]

  receipts Receipt[]

  Target Target[]

  CommitteeMonthlyAnalytics CommitteeMonthlyAnalytics[]

  TraderMonthlyAnalytics    TraderMonthlyAnalytics[]
  TraderOverallAnalytics    TraderOverallAnalytics[]
  CommodityMonthlyAnalytics CommodityMonthlyAnalytics[]
  CommodityOverallAnalytics CommodityOverallAnalytics[]

  DailyAnalytics DailyAnalytics[]

  MonthlyReport MonthlyReport[]

  @@index([name])
}

model Checkpost {
  id String @id @default(uuid())

  name String

  committeeId String

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  // Relations

  committee Committee @relation(fields: [committeeId], references: [id])

  receipts Receipt[]

  Target Target[]

  DailyAnalytics DailyAnalytics[]

  MonthlyReport MonthlyReport[]

  @@unique([name, committeeId])
}

model Trader {
  id String @id @default(uuid())

  name String @unique

  address String

  isActive Boolean @default(true)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  // Relations

  receipts Receipt[]

  TraderMonthlyAnalytics TraderMonthlyAnalytics[]
  TraderOverallAnalytics TraderOverallAnalytics[]

  @@index([name])
}

model Commodity {
  id String @id @default(uuid())

  name String @unique

  category String?

  subCategory String?

  description String?

  // Relations

  receipts Receipt[]

  CommodityMonthlyAnalytics CommodityMonthlyAnalytics[]
  CommodityOverallAnalytics CommodityOverallAnalytics[]

  @@index([name])
  @@index([category])
}

model Receipt {
  id String @id @default(uuid())

  receiptDate DateTime

  bookNumber String

  receiptNumber String

  // Trader information (now references Trader table)

  traderId String

  // Payee information (keeping as text since it might be different from trader)

  payeeName String

  payeeAddress String

  // Commodity and quantity

  commodityId String

  quantity Decimal

  unit Unit

  // For bags unit - weight handling

  weightPerBag Decimal? // Weight of each bag in kg (only for bags unit)

  totalWeightKg Decimal? // Total weight in kg (computed for bags, converted for tons/quintals)

  // Nature and fees

  natureOfReceipt NatureOfReceipt

  natureOtherText String?

  value Decimal

  feesPaid Decimal

  // Vehicle and invoice

  vehicleNumber String?

  invoiceNumber String?

  // Collection details

  collectionLocation CollectionLocation

  officeSupervisor String?

  checkpostId String?

  collectionOtherText String?

  // Receipt generation details

  receiptSignedBy String

  generatedBy String

  designation String

  committeeId String

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //soft delete instead of wiping completely

  cancelled Boolean   @default(false)
  deletedAt DateTime?

  // Relations

  committee Committee @relation(fields: [committeeId], references: [id])

  checkpost Checkpost? @relation(fields: [checkpostId], references: [id])

  user User @relation(fields: [generatedBy], references: [id])

  commodity Commodity? @relation(fields: [commodityId], references: [id])

  trader Trader @relation(fields: [traderId], references: [id])

  // Unique constraint for book_number + receipt_number per committee

  @@unique([bookNumber, receiptNumber, committeeId])
  @@index([receiptNumber])
  @@index([receiptDate])
  @@index([traderId])
  @@index([commodityId])
  @@index([natureOfReceipt])
  @@index([value])
  @@index([feesPaid])
  @@index([collectionLocation])
  @@index([generatedBy])
}

model Target {
  id String @id @default(uuid())

  year  Int
  month Int
  type  TargetType // Explicitly define the type of target

  committeeId String
  checkpostId String? // Should ONLY be present if type is CHECKPOST

  marketFeeTarget Decimal

  // Metadata
  setBy     String // User who set the target (e.g., AD's user ID)
  isActive  Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  committee Committee  @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  checkpost Checkpost? @relation(fields: [checkpostId], references: [id], onDelete: Cascade)

  // This new unique constraint correctly handles all cases without needing custom SQL.
  @@unique([year, month, committeeId, type, checkpostId])
  @@index([committeeId, year, month, type])
}

// Analytics

// To store pre-calculated stats for each trader per month
model TraderMonthlyAnalytics {
  id          String @id @default(uuid())
  traderId    String
  committeeId String
  year        Int
  month       Int

  // Aggregated totals for the month
  totalReceipts Int     @default(0)
  totalValue    Decimal @default(0)
  totalFeesPaid Decimal @default(0)
  totalQuantity Decimal @default(0) // Total weight in kg

  // Relations
  trader    Trader    @relation(fields: [traderId], references: [id], onDelete: Cascade)
  committee Committee @relation(fields: [committeeId], references: [id])

  // Ensures one summary record per trader, per committee, per month
  @@unique([traderId, committeeId, year, month])
}

// To store overall (all-time) stats for each trader
model TraderOverallAnalytics {
  id          String @id @default(uuid())
  traderId    String
  committeeId String

  // Aggregated all-time totals
  totalReceipts Int     @default(0)
  totalValue    Decimal @default(0)
  totalFeesPaid Decimal @default(0)
  totalQuantity Decimal @default(0) // Total weight in kg

  // Useful metadata
  firstTransactionDate DateTime
  lastTransactionDate  DateTime

  // Relations
  trader    Trader    @relation(fields: [traderId], references: [id], onDelete: Cascade)
  committee Committee @relation(fields: [committeeId], references: [id])

  // Ensures one overall summary record per trader, per committee
  @@unique([traderId, committeeId])
}

// To store pre-calculated stats for each commodity per month
model CommodityMonthlyAnalytics {
  id          String @id @default(uuid())
  commodityId String
  committeeId String
  year        Int
  month       Int

  // Aggregated totals for the month
  totalReceipts Int     @default(0)
  totalValue    Decimal @default(0)
  totalFeesPaid Decimal @default(0)
  totalQuantity Decimal @default(0) // Total weight in kg

  // Relations
  commodity Commodity @relation(fields: [commodityId], references: [id], onDelete: Cascade)
  committee Committee @relation(fields: [committeeId], references: [id])

  // Ensures one summary record per commodity, per committee, per month
  @@unique([commodityId, committeeId, year, month])
}

// To store overall (all-time) stats for each commodity
model CommodityOverallAnalytics {
  id          String @id @default(uuid())
  commodityId String
  committeeId String

  // Aggregated all-time totals
  totalReceipts Int     @default(0)
  totalValue    Decimal @default(0)
  totalFeesPaid Decimal @default(0)
  totalQuantity Decimal @default(0) // Total weight in kg

  // Relations
  commodity Commodity @relation(fields: [commodityId], references: [id], onDelete: Cascade)
  committee Committee @relation(fields: [committeeId], references: [id])

  // Ensures one overall summary record per commodity, per committee
  @@unique([commodityId, committeeId])
}

// Only the models that need changes for market fees focus

model CommitteeMonthlyAnalytics {
  id String @id @default(uuid())

  committeeId String

  year  Int
  month Int

  totalReceipts Int     @default(0)
  totalValue    Decimal @default(0)

  // SIMPLIFIED: Only track market fees (remove other fee breakdowns)
  marketFees Decimal @default(0) // Only market fees matter for targets

  // Fee collection location breakdown (for market fees only)
  officeFees          Decimal @default(0)
  checkpostMarketFees Decimal @default(0)
  otherFees           Decimal @default(0)

  marketFeeTarget Decimal? // Monthly market fee target

  uniqueTraders     Int @default(0)
  uniqueCommodities Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  committee Committee @relation(fields: [committeeId], references: [id])

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([committeeId, year, month])
  @@index([committeeId, year, month])
  @@index([committeeId])
}

model DailyAnalytics {
  id String @id @default(uuid())

  receiptDate DateTime
  committeeId String
  checkpostId String?

  // Daily totals
  totalReceipts Int     @default(0)
  totalValue    Decimal @default(0)
  totalQuantity Decimal @default(0)

  // SIMPLIFIED: Only track market fees for analytics
  marketFees Decimal @default(0) // Only market fees from all receipts

  // Collection location breakdown (for market fees only)
  officeFees    Decimal @default(0)
  checkpostFees Decimal @default(0)
  otherFees     Decimal @default(0)

  uniqueTraders     Int @default(0)
  uniqueCommodities Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  committee Committee  @relation(fields: [committeeId], references: [id])
  checkpost Checkpost? @relation(fields: [checkpostId], references: [id])

  @@unique([receiptDate, committeeId])
  @@index([receiptDate, committeeId])
  @@index([committeeId, receiptDate])
  @@index([receiptDate, checkpostId])
}

model MonthlyReport {
  id String @id @default(uuid())

  reportSlug String @unique
  year       Int
  month      Int

  committeeId String?
  checkpostId String?
  reportLevel ReportLevel

  // Basic metrics
  totalReceipts Int
  totalValue    Decimal
  totalQuantity Decimal

  // SIMPLIFIED: Only market fees matter for reporting
  marketFees Decimal @default(0) // This is what we track against targets

  // Target comparison (only for market fees)
  monthlyTarget         Decimal? // Monthly market fee target
  cumulativeTarget      Decimal? // Cumulative target up to this month
  monthlyAchievement    Decimal // Market fees collected this month
  cumulativeAchievement Decimal // Progressive total up to this month

  // Performance metrics
  monthlyVariance    Decimal? // Monthly target vs achievement
  cumulativeVariance Decimal? // Cumulative target vs achievement
  achievementPercent Decimal? // Percentage of annual target achieved

  // Previous year comparison
  prevYearSameMonth Decimal? // Same month previous year
  yearOnYearGrowth  Decimal? // YoY growth percentage

  // Relations
  committee Committee? @relation(fields: [committeeId], references: [id])
  checkpost Checkpost? @relation(fields: [checkpostId], references: [id])

  @@unique([year, month, reportLevel, committeeId, checkpostId])
  @@index([year, month, reportLevel])
  @@index([committeeId, year, month])
}
